// -*- coding: utf-8, tab-width: 2 -*-

import getOwn from 'getown';

import authorIdentities from './tmp.author_identities.json';
// ^-- generated by userConv.mjs


function unpackSingleArrayElement(anno, key) {
  const val = anno[key];
  if (!val) { return false; }
  if (!Array.isArray(val)) { return val; }
  if (val.length <= 1) { return (val[0] || false); }
  throw new RangeError('Expected exactly one ' + key + ' in array.');
}


const EX = function fixAuthor(anno, job) {
  const { data } = anno;
  const creator = unpackSingleArrayElement(data, 'creator');
  if (!creator) { return; }

  const crId = String(creator.id || creator || '');
  const uuid = getOwn(authorIdentities.byLegacyName, crId);
  const agent = (uuid && getOwn(authorIdentities.byUUID, uuid));
  if (agent) {
    data.creator = agent;
    return;
  }

  data.creator = {
    id: 'data:text/plain,' + encodeURI(crId),
    name: (creator.displayName || crId.split(/\W/)[0]),
  };

  // console.error('no author:', anno);
  job.assume('author_identity_known:' + JSON.stringify(creator));
};


export default EX;
