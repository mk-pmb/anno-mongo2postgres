// -*- coding: utf-8, tab-width: 2 -*-

import fs from 'fs';

import authorIdentities from './tmp.author_identities.json';
// ^-- generated by userConv.mjs


const { byLegacyName } = authorIdentities;

const dummyDomain = '@dummies.ubhd.alt'; // RFC 9476

const sqlFilename = 'tmp.fixLegacyUserIdColumn.sql';
const sqlStream = fs.createWriteStream(sqlFilename);
// const sqlSafeUserNameRgx = /^[\w\.\-]+@((?:\w[\w\-]+(?:\.|$)){2,})$/;
const sqlSafeUserNameRgx = /^https:[!#-&\(-z]+$/;


Object.keys(byLegacyName).sort().forEach(function each(origUser) {
  if (!origUser) { return; }
  const uuid = byLegacyName[origUser];
  let user = origUser;
  if (user === 'wgd@DWork') { user = 'wgd' + dummyDomain; }
  if (user === 'krueger@dummy') { user = 'krueger' + dummyDomain; }
  if (!user.startsWith('https://')) { return; }
  const m = (sqlSafeUserNameRgx.exec(user) || false)[0];
  if (m !== user) { throw new Error('Unexpected user name syntax: ' + user); }

  let paddedUserQ = user + "'";
  while (paddedUserQ.length < 40) { paddedUserQ += ' '; }
  let upd = `
    UPDATE anno_data SET author_local_userid = '¹
    WHERE author_local_userid = '' AND (
      (details->'creator'->>'id'::text = 'urn:uuid:²')
      OR (details->'creator'->>'id'::text = 'data:text/plain,¹)
    );`.trim();
  upd = upd.replace(/\s*\n\s*/g, ' ');
  upd = upd.replace(/¹/g, paddedUserQ);
  upd = upd.replace(/²/g, uuid);
  sqlStream.write(upd + '\n');
});

console.debug('Wrote', sqlFilename);
